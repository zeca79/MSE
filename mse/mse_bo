LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use work.log_package.all;  -- Importa o pacote que contém a função log2

ENTITY mse_bo IS
GENERIC (
		B : POSITIVE := 8; -- número de bits por amostra
		OP : POSITIVE := 64 -- dimensão do bloco (8x8)
		);
		
	PORT (
		
		clk : IN STD_LOGIC; -- ck
		sample_ori : IN STD_LOGIC_VECTOR (B-1 DOWNTO 0); -- Mem_A[end]
		sample_can : IN STD_LOGIC_VECTOR (B-1 DOWNTO 0); -- Mem_B[end]
		address : OUT STD_LOGIC_VECTOR (log2(OP)-1 DOWNTO 0); -- end
		mse_value : OUT STD_LOGIC_VECTOR ((2*B)-1 DOWNTO 0); --sad
		resto : OUT STD_LOGIC_VECTOR ((2*B)-1 DOWNTO 0);
		enMuxi : IN STD_LOGIC;
		enRegi : IN STD_LOGIC;
		enRegAB : IN STD_LOGIC;
		enMuxSoma : IN STD_LOGIC;
		enRegSoma : IN STD_LOGIC;
		enRegResultado : IN STD_LOGIC;
		enRegPotenciacao : IN STD_LOGIC;
		enRegSubtracao : IN STD_LOGIC;
		menor : OUT STD_LOGIC
		);
end mse_bo;

architecture arch of mse_bo is

signal Ssomai : STD_LOGIC_VECTOR (log2(OP)-1 DOWNTO 0);
signal Sout_reg_i, Sout_muxi : STD_LOGIC_VECTOR (log2(OP) DOWNTO 0);
signal SsubA, SsubB, Sout_regSubtrator, Ssubout : STD_LOGIC_VECTOR (B-1 DOWNTO 0);
signal Sout_potenciacao, Sout_RegPotenciacao : STD_LOGIC_VECTOR ((2*B)-1 DOWNTO 0);
signal Sresultado : STD_LOGIC_VECTOR ((4*B)-1 DOWNTO 0);
signal Sout_somador, Sout_muxSoma, Sout_regsoma, Sout_divisor, sSoma, Sresto: STD_LOGIC_VECTOR (((2*B)+log2(OP))-1 DOWNTO 0);
signal Scout : STD_LOGIC;

begin

muxi : entity work.mux2para1
	GENERIC MAP (N => (log2(OP)+1))
	PORT MAP(
		a => Scout & Ssomai,
		b => (others => '0'),
		sel => enMuxi,
		y => Sout_muxi
	);
	
somadori : entity work.somador
	GENERIC MAP (N => (log2(OP)))
	port MAP(
		A => Sout_reg_i (log2(OP)-1 downto 0),
		B => std_logic_vector(to_unsigned(1, log2(OP))),
		S => Ssomai,
		cout => Scout
	);

reg_i : entity work.registrador 
	GENERIC MAP(N => (log2(OP)+1))
	port MAP(
		D => Sout_muxi,
		Reset => '0',
		Enable => enRegi,
		CLK => clk,
		Q => Sout_reg_i
	 );
	 
reg_A : entity work.registrador 
	GENERIC MAP(N => B)
	port MAP(
		D => sample_ori,
		Reset => '0',
		Enable => enRegAB,
		CLK => clk,
		Q => SsubA
	 );
	 
reg_B : entity work.registrador
	GENERIC MAP(N => B)
	port MAP (
		D => sample_can,
		Reset => '0',
		Enable => enRegAB,
		CLK => clk,
		Q => SsubB
	 );
	 
subtrator : entity work.subtractor
	generic MAP(N => B)
	port MAP(
		a => SsubA,
		b => SsubB,
		s =>Ssubout
	);

RegSubtracao : entity work.registrador
	GENERIC MAP(N => B)
	port MAP (
		D => Ssubout,
		Reset => '0',
		Enable => enRegSubtracao,
		CLK => clk,
		Q => Sout_regSubtrator
	 );
	 
potenciacao : entity work.multiplicador
	GENERIC MAP (N => B)
	port MAP(
		A => Sout_regSubtrator,
		B => Sout_regSubtrator,
		P => Sout_potenciacao
	 );	
	
RegPotenciacao : entity work.registrador
	GENERIC MAP(N => (2*B))
	port MAP (
		D => Sout_potenciacao,
		Reset => '0',
		Enable => enRegPotenciacao,
		CLK => clk,
		Q => Sout_RegPotenciacao
	 );		
	
somador : entity work.somador
	GENERIC MAP (N => ((2*B)+log2(OP)))
	port MAP(
		A => sSoma,
		B => Sout_regsoma,
		S => Sout_somador
	);
	
muxSoma : entity work.mux2para1
	GENERIC MAP (N => ((2*B)+log2(OP)))
	PORT MAP(
		a => Sout_somador,
		b => (others => '0'),
		sel => enMuxSoma,
		y => Sout_muxSoma
	);
	
reg_soma : entity work.registrador 
	GENERIC MAP(N => ((2*B)+log2(OP)))
	port MAP (
		D => Sout_muxSoma,
		Reset => '0',
		Enable => enRegSoma,
		CLK => clk,
		Q => Sout_regsoma
	 );	

divisor : entity work.divisor
	GENERIC MAP (N => ((2*B)+log2(OP)))
	port MAP(
		numerador => Sout_regsoma,
		denominador => std_logic_vector(to_unsigned(OP, Sout_regsoma'length)),
		quociente => Sout_divisor,
		resto => Sresto
	 );	
		 
reg_Resultado : entity work.registrador
	GENERIC MAP(N => 4*B)
	port MAP (
		D => Sout_divisor((2*B)-1 DOWNTO 0) & Sresto(((2*B)+log2(OP))-1 DOWNTO log2(OP)),
		Reset => '0',
		Enable => enRegResultado,
		CLK => clk,
		Q => Sresultado
	 );

mse_value <= Sresultado ((4*B)-1 DOWNTO (2*B));
resto <= Sresultado ((2*B)-1 DOWNTO 0); 
sSoma(((2*B)+log2(OP))-1 DOWNTO 2*B) <= (others => '0');
sSoma((2*B)-1 DOWNTO 0) <= Sout_RegPotenciacao;
menor <= not Sout_reg_i(log2(OP));
address <= Sout_reg_i (log2(OP)-1 downto 0);

END architecture;
